import Relation.Binary.PropositionalEquality as Eq
open import Data.Empty using (‚ä•)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_; _‚à∏_; s‚â§s; _‚â§_)
open import Data.Nat.Properties as Nat using (‚â§-refl; ‚â§-trans)
open import Data.Product using (_√ó_; _,_; ‚àÉ-syntax)
open import Relation.Unary using (_‚àà_)
open Eq using (_‚â°_; refl; sym)

-- Type soundness for a language with nontermination
-- (if computation is finite, then it does not become "stuck")
module Nontermination where

suc‚â°n+1 : ‚àÄ k ‚Üí suc k ‚â° k + 1
suc‚â°n+1 k
  rewrite Nat.+-suc k 0 | Nat.+-identity ≥ k = refl

data Type : Set where
  base : Type
  _‚áí_ : Type ‚Üí Type ‚Üí Type

infixr 7 _‚áí_

variable S T : Type

data Ctx : Set where
  ‚àÖ : Ctx
  _‚à∑_ : Ctx ‚Üí Type ‚Üí Ctx

infixl 5 _‚à∑_

variable Œì Œî : Ctx

data _‚àã_ : Ctx ‚Üí Type ‚Üí Set where
  zero : Œì ‚à∑ T ‚àã T
  suc : Œì ‚àã T ‚Üí Œì ‚à∑ S ‚àã T

infix 4 _‚àã_

variable x : Œì ‚àã T

data _‚ä¢_ : Ctx ‚Üí Type ‚Üí Set where
  var : Œì ‚àã T ‚Üí Œì ‚ä¢ T
  ∆õ_ : Œì ‚à∑ S ‚ä¢ T ‚Üí Œì ‚ä¢ S ‚áí T
  _¬∑_ : Œì ‚ä¢ S ‚áí T ‚Üí Œì ‚ä¢ S ‚Üí Œì ‚ä¢ T
  Œº_ : Œì ‚à∑ T ‚ä¢ T ‚Üí Œì ‚ä¢ T

infix 4 _‚ä¢_
infix 5 ∆õ_
infix 5 Œº_
infixl 7 _¬∑_

variable r s t : Œì ‚ä¢ T

mutual
  data Env : Ctx ‚Üí Set where
    ‚àÖ : Env ‚àÖ
    _‚à∑_ : Env Œì ‚Üí Domain T ‚Üí Env (Œì ‚à∑ T)

  data Domain : Type ‚Üí Set where
    ‚ü®_‚ü©_ : Œì ‚ä¢ T ‚Üí Env Œì ‚Üí Domain T

infix 6 ‚ü®_‚ü©_

variable Œ≥ : Env Œì
variable Œ¥ : Env Œî
variable a b d f : Domain T

_??_ : Env Œì ‚Üí Œì ‚àã T ‚Üí Domain T
(Œ≥ ‚à∑ a) ?? zero = a
(Œ≥ ‚à∑ a) ?? suc x = Œ≥ ?? x

infix 5 _??_

variable n i j k j‚ÇÅ j‚ÇÇ : ‚Ñï

data _‚ä¢_‚áì_#_ : Env Œì ‚Üí Œì ‚ä¢ T ‚Üí Domain T ‚Üí ‚Ñï ‚Üí Set where
  evalVar : Œ≥ ?? x ‚â° ‚ü® t ‚ü© Œ¥
          ‚Üí Œ¥ ‚ä¢ t ‚áì a # k
            -----------------
          ‚Üí Œ≥ ‚ä¢ var x ‚áì a # k

  evalAbs : Œ≥ ‚ä¢ ∆õ t ‚áì ‚ü® ∆õ t ‚ü© Œ≥ # zero

  evalApp : Œ≥ ‚ä¢ r ‚áì ‚ü® ∆õ t ‚ü© Œ¥ # j‚ÇÅ
          ‚Üí Œ¥ ‚à∑ ‚ü® s ‚ü© Œ≥ ‚ä¢ t ‚áì a # j‚ÇÇ
            -----------------------------
          ‚Üí Œ≥ ‚ä¢ r ¬∑ s ‚áì a # suc (j‚ÇÅ + j‚ÇÇ)

  evalRec : Œ≥ ‚à∑ ‚ü® Œº t ‚ü© Œ≥ ‚ä¢ t ‚áì a # k
            -------------------------
          ‚Üí Œ≥ ‚ä¢ Œº t ‚áì a # suc k

infix 4 _‚ä¢_‚áì_#_

mutual
  -- Step-indexed logical relation for domain
  ùíü[_,_] : (T : Type) ‚Üí ‚Ñï ‚Üí Domain T ‚Üí Set
  ùíü[ S ‚áí T , k ] (‚ü® ∆õ t ‚ü© Œ¥) =
    ‚àÄ {j : ‚Ñï}
    ‚Üí j < k
    ‚Üí ‚àÄ {Œì} {Œ≥ : Env Œì} {s : Œì ‚ä¢ S}
      ‚Üí (Œ≥ , s) ‚àà ùíû[ S , j ]
      ‚Üí (Œ¥ ‚à∑ ‚ü® s ‚ü© Œ≥ , t) ‚àà ùíû[ T , j ]
  ùíü[ _ , _ ] _ = ‚ä•

  -- Step-indexed logical relation for terms
  ùíû[_,_] : (T : Type) ‚Üí ‚Ñï ‚Üí Env Œì √ó Œì ‚ä¢ T ‚Üí Set
  ùíû[ T , k ] (Œ≥ , t) =
    ‚àÄ {j} {b}
    ‚Üí j < k
    ‚Üí Œ≥ ‚ä¢ t ‚áì b # j ‚Üí b ‚àà ùíü[ T , k ‚à∏ j ]

-- Step-indexed semantic typing for environments
_‚ä®_#_ : (Œì : Ctx) ‚Üí Env Œì ‚Üí ‚Ñï ‚Üí Set
Œì ‚ä® Œ≥ # k = ‚àÄ {T} {Œî : Ctx} {t : Œî ‚ä¢ T} {Œ¥ : Env Œî}
            ‚Üí (x : Œì ‚àã T)
            ‚Üí Œ≥ ?? x ‚â° ‚ü® t ‚ü© Œ¥
            ‚Üí (Œ¥ , t) ‚àà ùíû[ T , k ]

infix 4 _‚ä®_#_

-- Extending semantically-typed environments
_^_ : Œî ‚ä® Œ¥ # k ‚Üí (Œ≥ , s) ‚àà ùíû[ S , k ] ‚Üí Œî ‚à∑ S ‚ä® Œ¥ ‚à∑ ‚ü® s ‚ü© Œ≥ # k
(‚ä®Œ¥ ^ s‚ààùíû) zero refl = s‚ààùíû
(‚ä®Œ¥ ^ s‚ààùíû) (suc x) = ‚ä®Œ¥ x

-- Step-indexed semantic typing
‚ä®_#_ : Œì ‚ä¢ T ‚Üí ‚Ñï ‚Üí Set
‚ä®_#_ {Œì} {T} t k =
  ‚àÄ {Œ≥ : Env Œì}
  ‚Üí Œì ‚ä® Œ≥ # k
  ‚Üí (Œ≥ , t) ‚àà ùíû[ T , k ]

-- Semantic typing: step-indexed typing is satisfied at all finite numbers
‚ä®_ : Œì ‚ä¢ T ‚Üí Set
‚ä®_ {Œì} {T} t =
  ‚àÄ (k : ‚Ñï) ‚Üí ‚ä® t # k

ùíü-anti-monotonicity : j ‚â§ k ‚Üí a ‚àà ùíü[ T , k ] ‚Üí a ‚àà ùíü[ T , j ]
ùíü-anti-monotonicity {T = S ‚áí T} {‚ü® ∆õ t ‚ü© Œ¥} le a‚ààùíü le‚Ä≤ = a‚ààùíü (‚â§-trans le‚Ä≤ le)

ùíû-anti-monotonicity : j ‚â§ k ‚Üí (Œ≥ , t) ‚àà ùíû[ T , k ] ‚Üí (Œ≥ , t) ‚àà ùíû[ T , j ]
ùíû-anti-monotonicity le t‚ààùíû {j‚Ä≤} le‚Ä≤ t‚áì =
  ùíü-anti-monotonicity (Nat.‚à∏-monoÀ°-‚â§ j‚Ä≤ le) (t‚ààùíû (‚â§-trans le‚Ä≤ le) t‚áì)

-- Semantic typing for environments is downwards closed
‚ä®-downwards-closure : j ‚â§ k ‚Üí Œì ‚ä® Œ≥ # k ‚Üí Œì ‚ä® Œ≥ # j
‚ä®-downwards-closure le ‚ä®Œ≥ x eq {j‚Ä≤} lt t‚áì =
  ùíü-anti-monotonicity (Nat.‚à∏-monoÀ°-‚â§ j‚Ä≤ le) (‚ä®Œ≥ x eq (‚â§-trans lt le) t‚áì)

-- Well-typed terms are semantically typed
fundamental-lemma : (t : Œì ‚ä¢ T) ‚Üí ‚ä® t
fundamental-lemma (var x) (suc k) {Œ≥ = Œ≥} ‚ä®Œ≥ le (evalVar eq t‚áì) =
  ‚ä®Œ≥ x eq le t‚áì
fundamental-lemma (∆õ t) (suc k) {Œ≥ = Œ≥} ‚ä®Œ≥ _ evalAbs {j} le s‚ààùíû =
  fundamental-lemma t j (‚ä®-downwards-closure {Œ≥ = Œ≥} (Nat.<‚áí‚â§ le) ‚ä®Œ≥ ^ s‚ààùíû)
fundamental-lemma {T = T} (r ¬∑ s) (suc k) {Œ≥ = Œ≥} ‚ä®Œ≥ {b = b} (s‚â§s le)
  (evalApp {j‚ÇÅ = j‚ÇÅ} {j‚ÇÇ = j‚ÇÇ} r‚áì t‚áì) =
  lemma
  where
    -- Inequality proofs
    le‚ÇÄ = ‚â§-trans (‚â§-trans (Nat.n‚â§1+n j‚ÇÅ) (s‚â§s (Nat.m‚â§m+n j‚ÇÅ j‚ÇÇ))) le
    le‚ÇÅ = ‚â§-trans (s‚â§s le‚ÇÄ) (s‚â§s ‚â§-refl)
    le‚ÇÇ = ‚â§-trans (Nat.m‚à∏n‚â§m k j‚ÇÅ) (Nat.n‚â§1+n k)
    le‚ÇÉ : suc (k ‚à∏ j‚ÇÅ) ‚â§ suc k ‚à∏ j‚ÇÅ
    le‚ÇÉ rewrite suc‚â°n+1 k | Nat.+-‚à∏-comm {k} 1 {j‚ÇÅ} le‚ÇÄ | suc‚â°n+1 (k ‚à∏ j‚ÇÅ) = ‚â§-refl
    le‚ÇÑ : suc j‚ÇÇ ‚â§ k ‚à∏ j‚ÇÅ
    le‚ÇÑ rewrite sym (Nat.+-suc j‚ÇÅ j‚ÇÇ) with Nat.‚à∏-monoÀ°-‚â§ j‚ÇÅ le
    ...  | le‚Ä≤ rewrite Nat.+-‚à∏-comm {j‚ÇÅ} (suc j‚ÇÇ) {j‚ÇÅ} ‚â§-refl | Nat.n‚à∏n‚â°0 j‚ÇÅ = le‚Ä≤

    ih·µ£ = fundamental-lemma r (suc k) ‚ä®Œ≥ le‚ÇÅ r‚áì
    ih‚Çõ = fundamental-lemma s (k ‚à∏ j‚ÇÅ) (‚ä®-downwards-closure {Œ≥ = Œ≥} le‚ÇÇ ‚ä®Œ≥)

    lemma : ùíü[ T , k ‚à∏ (j‚ÇÅ + j‚ÇÇ) ] b
    lemma with ih·µ£ le‚ÇÉ ih‚Çõ le‚ÇÑ t‚áì
    ... | ih rewrite Nat.‚à∏-+-assoc k j‚ÇÅ j‚ÇÇ = ih
fundamental-lemma (Œº t) (suc n) {Œ≥ = Œ≥} ‚ä®Œ≥ (s‚â§s le) (evalRec t‚áì) =
  fundamental-lemma t n (‚ä®Œ≥‚Ä≤ ^ fundamental-lemma (Œº t) n ‚ä®Œ≥‚Ä≤) le t‚áì
  where
    ‚ä®Œ≥‚Ä≤ = ‚ä®-downwards-closure {Œ≥ = Œ≥} (Nat.n‚â§1+n n) ‚ä®Œ≥
