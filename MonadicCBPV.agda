open import Category.Monad using (RawMonad)
open import Data.Product using (_√ó_; _,_; ‚àÉ-syntax)
open import Data.Unit using (‚ä§; tt)

module MonadicCBPV (ùëª : Set ‚Üí Set) (MonadT : RawMonad ùëª) where
  open RawMonad MonadT renaming (return to Œ∑)

  infix 4 _‚àã_ _‚ä©_ _‚ä¢_ _??_
  infixl 5 _‚Ä¢_
  infix 5 ùëº_ ùë≠_ ∆õ_
  infix 6 _!
  infixr 6 $_‚üµ_
  infixr 7 _‚áí_
  infixl 7 _¬∑_

  mutual
    data ValType : Set where
      ùüô : ValType
      ùëº_ : CompType ‚Üí ValType

    data CompType : Set where
      _‚áí_ : ValType ‚Üí CompType ‚Üí CompType
      ùë≠_ : ValType ‚Üí CompType

  variable A A‚ÇÅ A‚ÇÇ : ValType
  variable B : CompType

  data Ctx : Set where
    Œµ : Ctx
    _‚Ä¢_ : Ctx ‚Üí ValType ‚Üí Ctx

  variable Œì : Ctx

  data _‚àã_ : Ctx ‚Üí ValType ‚Üí Set where
    zero : Œì ‚Ä¢ A ‚àã A
    suc : Œì ‚àã A‚ÇÅ ‚Üí Œì ‚Ä¢ A‚ÇÇ ‚àã A‚ÇÅ

  mutual
    data _‚ä©_ : Ctx ‚Üí ValType ‚Üí Set where
      var : Œì ‚àã A ‚Üí Œì ‚ä© A   -- variable
      ‚ü™_‚ü´ : Œì ‚ä¢ B ‚Üí Œì ‚ä© ùëº B -- thunk
      one : Œì ‚ä© ùüô           -- unit

    data _‚ä¢_ : Ctx ‚Üí CompType ‚Üí Set where
      return : Œì ‚ä© A ‚Üí Œì ‚ä¢ ùë≠ A          -- return
      _¬∑_ : Œì ‚ä¢ A ‚áí B ‚Üí Œì ‚ä© A ‚Üí Œì ‚ä¢ B   -- app
      ∆õ_ : Œì ‚Ä¢ A ‚ä¢ B ‚Üí Œì ‚ä¢ A ‚áí B        -- abs
      _! : Œì ‚ä© ùëº B ‚Üí Œì ‚ä¢ B              -- force
      $_‚üµ_ : Œì ‚ä¢ ùë≠ A ‚Üí Œì ‚Ä¢ A ‚ä¢ B ‚Üí Œì ‚ä¢ B -- let in

  variable V V‚ÇÅ V‚ÇÇ : Œì ‚ä© A
  variable M N M‚ÇÅ M‚ÇÇ : Œì ‚ä¢ B

  record MonadAlgebra : Set‚ÇÅ where
    field
      ùëã : Set
      Œ± : ùëª ùëã ‚Üí ùëã

  open MonadAlgebra

  mutual
    ValDomain : ValType ‚Üí Set
    ValDomain ùüô = ‚ä§
    ValDomain (ùëº B) = ‚ä§ ‚Üí Carrier B

    Carrier : CompType ‚Üí Set
    Carrier B = ùëã (Domain B)

    Domain : CompType ‚Üí MonadAlgebra
    ùëã (Domain (A ‚áí B)) = ValDomain A ‚Üí Carrier B
    Œ± (Domain (A ‚áí B)) ùëªf W = Œ± (Domain B) (ùëªf >>= Œª f ‚Üí Œ∑ (f W))

    ùëã (Domain (ùë≠ A)) = ùëª (ValDomain A)
    Œ± (Domain (ùë≠ A)) ùëªùëªW = join ùëªùëªW

  variable W : ValDomain A
  variable T : Carrier B

  Env : Ctx ‚Üí Set
  Env Œµ = ‚ä§
  Env (Œì ‚Ä¢ A) = Env Œì √ó ValDomain A

  variable Œ≥ : Env Œì

  _??_ : Env Œì ‚Üí Œì ‚àã A ‚Üí ValDomain A
  (_ , a) ?? zero = a
  (Œ≥ , _) ?? suc x = Œ≥ ?? x

  mutual
    ‚ü¶_‚üßv : Œì ‚ä© A ‚Üí Env Œì ‚Üí ValDomain A
    ‚ü¶ var x ‚üßv Œ≥ = Œ≥ ?? x
    ‚ü¶ ‚ü™ M ‚ü´ ‚üßv Œ≥ = Œª _ ‚Üí ‚ü¶ M ‚üßc Œ≥
    ‚ü¶ one ‚üßv Œ≥ = tt

    ‚ü¶_‚üßc : Œì ‚ä¢ B ‚Üí Env Œì ‚Üí Carrier B
    ‚ü¶ return V ‚üßc Œ≥ = Œ∑ (‚ü¶ V ‚üßv Œ≥)
    ‚ü¶ ∆õ M ‚üßc Œ≥ = Œª W ‚Üí ‚ü¶ M ‚üßc (Œ≥ , W)
    ‚ü¶ M ¬∑ V ‚üßc Œ≥ = ‚ü¶ M ‚üßc Œ≥ (‚ü¶ V ‚üßv Œ≥)
    ‚ü¶ V ! ‚üßc Œ≥ = ‚ü¶ V ‚üßv Œ≥ tt
    ‚ü¶_‚üßc {B = B} ($ M ‚üµ N) Œ≥ = Œ± (Domain B) (‚ü¶ M ‚üßc Œ≥ >>= Œª W ‚Üí Œ∑ (‚ü¶ N ‚üßc (Œ≥ , W)))
