import Relation.Binary.PropositionalEquality as Eq
open import Data.Empty using (‚ä•)
open import Data.Fin using (Fin; suc; zero)
open import Data.Nat using (‚Ñï; suc; zero; _<_; _‚à∏_)
open import Data.Nat.Properties as Nat using (‚â§-refl)
open import Data.Product using (_√ó_; _,_; ‚àÉ-syntax)
open import Data.Unit using (‚ä§; tt)
open import Relation.Unary using (_‚àà_)
open Eq using (_‚â°_; refl)

module StepIndexedInterpreter where

variable n k j : ‚Ñï
variable x : Fin n

data Term : ‚Ñï ‚Üí Set where
  var : Fin n ‚Üí Term n
  ∆õ_ : Term (suc n) ‚Üí Term n
  _¬∑_ : Term n ‚Üí Term n ‚Üí Term n

variable r s t : Term n

infixl 7 _¬∑_
infix 5 ∆õ_

mutual
  data Env : ‚Ñï ‚Üí Set where
    Œµ : Env zero
    _‚Ä¢_ : Env n ‚Üí Domain ‚Üí Env (suc n)

  data Domain : Set where
    wrong : Domain
    timeout : Domain
    ‚ü®∆õ_‚ü©_ : Term (suc n) ‚Üí Env n ‚Üí Domain

variable Œ≥ Œ¥ : Env n
variable a b d f : Domain

infix 6 ‚ü®∆õ_‚ü©_

data Good : Domain ‚Üí Set where
  timeoutGood : Good timeout
  closureGood : Good (‚ü®∆õ t ‚ü© Œ≥)

_??_ : Env n ‚Üí Fin n ‚Üí Domain
(_ ‚Ä¢ a) ?? zero = a
(Œ≥ ‚Ä¢ _) ?? suc x = Œ≥ ?? x

infix 5 _??_

eval : Term n ‚Üí Env n ‚Üí ‚Ñï ‚Üí Domain
eval t Œ≥ zero = timeout
eval (var x) Œ≥ (suc n) = Œ≥ ?? x
eval (∆õ t) Œ≥ (suc n) = ‚ü®∆õ t ‚ü© Œ≥
eval (r ¬∑ s) Œ≥ (suc n)
  with eval r Œ≥ n
... | timeout = wrong
... | wrong = wrong
... | (‚ü®∆õ t ‚ü© Œ¥)
  with eval s Œ≥ n
... | a =
  eval t (Œ¥ ‚Ä¢ a) n

data Type : Set where
  Œπ : Type
  _‚áí_ : Type ‚Üí Type ‚Üí Type

variable S T : Type

infixr 7 _‚áí_

data Ctx : ‚Ñï ‚Üí Set where
  Œµ : Ctx zero
  _‚Ä¢_ : Ctx n ‚Üí Type ‚Üí Ctx (suc n)

variable Œì : Ctx n

data _‚à∑_‚àà_ : Fin n ‚Üí Type ‚Üí Ctx n ‚Üí Set where
  here : zero ‚à∑ T ‚àà Œì ‚Ä¢ T
  there : x ‚à∑ T ‚àà Œì ‚Üí suc x ‚à∑ T ‚àà Œì ‚Ä¢ S

infix 4 _‚à∑_‚àà_

data _‚ä¢_‚à∑_ : Ctx n ‚Üí Term n ‚Üí Type ‚Üí Set where
  ‚ä¢var : x ‚à∑ T ‚àà Œì ‚Üí Œì ‚ä¢ var x ‚à∑ T

  ‚ä¢abs : Œì ‚Ä¢ S ‚ä¢ t ‚à∑ T ‚Üí Œì ‚ä¢ ∆õ t ‚à∑ S ‚áí T

  ‚ä¢app : Œì ‚ä¢ r ‚à∑ S ‚áí T ‚Üí Œì ‚ä¢ s ‚à∑ S ‚Üí Œì ‚ä¢ r ¬∑ s ‚à∑ T

infix 4 _‚ä¢_‚à∑_

mutual
  ùíü‚ü¶_,_‚üß : Type ‚Üí ‚Ñï ‚Üí Domain ‚Üí Set
  ùíü‚ü¶ S ‚áí T , k ‚üß (‚ü®∆õ t ‚ü© Œ¥) =
    ‚àÄ {j : ‚Ñï}
    ‚Üí j < k
    ‚Üí ‚àÄ {a} ‚Üí a ‚àà ùíü‚ü¶ S , j ‚üß
      ‚Üí (Œ¥ ‚Ä¢ a , t) ‚àà ‚Ñ∞‚ü¶ T , j ‚üß
  ùíü‚ü¶ Œπ , _ ‚üß timeout = ‚ä§
  ùíü‚ü¶ _ , _ ‚üß _ = ‚ä•

  ‚Ñ∞‚ü¶_,_‚üß : Type ‚Üí ‚Ñï ‚Üí Env n √ó Term n ‚Üí Set
  ‚Ñ∞‚ü¶ T , k ‚üß (Œ≥ , t) =
      ‚àÄ {j} {b}
      ‚Üí j < k
      ‚Üí eval t Œ≥ j ‚â° b ‚Üí b ‚àà ùíü‚ü¶ T , k ‚à∏ j ‚üß

_‚ä®_#_ : Ctx n ‚Üí Env n ‚Üí ‚Ñï ‚Üí Set
Œì ‚ä® Œ≥ # k =
  ‚àÄ {x} {T} {a} ‚Üí x ‚à∑ T ‚àà Œì ‚Üí Œ≥ ?? x ‚â° a ‚Üí a ‚àà ùíü‚ü¶ T , k ‚üß

infix 4 _‚ä®_#_

_‚ä®_‚à∑_#_ : Ctx n ‚Üí Term n ‚Üí Type ‚Üí ‚Ñï ‚Üí Set
Œì ‚ä® t ‚à∑ T # k =
  ‚àÄ {Œ≥} ‚Üí Œì ‚ä® Œ≥ # k ‚Üí (Œ≥ , t) ‚àà ‚Ñ∞‚ü¶ T , k ‚üß

infix 4 _‚ä®_‚à∑_#_

_‚ä®_‚à∑_ : Ctx n ‚Üí Term n ‚Üí Type ‚Üí Set
Œì ‚ä® t ‚à∑ T = ‚àÄ k ‚Üí Œì ‚ä® t ‚à∑ T # k

infix 4 _‚ä®_‚à∑_

fundamental-lemma : Œì ‚ä¢ t ‚à∑ T ‚Üí Œì ‚ä® t ‚à∑ T
fundamental-lemma (‚ä¢var x) (suc k) x‚ÇÅ x‚ÇÇ x‚ÇÉ = {!!}
fundamental-lemma (‚ä¢abs x) (suc k) x‚ÇÅ x‚ÇÇ x‚ÇÉ = {!!}
fundamental-lemma (‚ä¢app x x‚ÇÑ) (suc k) x‚ÇÅ x‚ÇÇ x‚ÇÉ = {!!}

ùíü‚Üígood : b ‚àà ùíü‚ü¶ T , k ‚üß ‚Üí Good b
ùíü‚Üígood {timeout} {Œπ} _ = timeoutGood
ùíü‚Üígood {‚ü®∆õ _ ‚ü© _} {_ ‚áí _} _ = closureGood

type-soundness : Œµ ‚ä¢ t ‚à∑ T ‚Üí Good (eval t Œµ n)
type-soundness {n = n} ‚ä¢t =
  ùíü‚Üígood (fundamental-lemma ‚ä¢t (suc n) (Œª ()) ‚â§-refl refl)
