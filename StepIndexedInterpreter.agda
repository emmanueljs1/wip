import Relation.Binary.PropositionalEquality as Eq
open import Data.Empty using (‚ä•)
open import Data.Fin using (Fin; suc; zero)
open import Data.Nat using (‚Ñï; suc; zero; _<_; _‚à∏_)
open import Data.Nat.Properties as Nat using (‚â§-refl)
open import Data.Product using (_√ó_; _,_; ‚àÉ-syntax)
open import Data.Unit using (‚ä§; tt)
open import Relation.Unary using (_‚àà_)
open Eq using (_‚â°_; refl)

module StepIndexedInterpreter where

variable n k j : ‚Ñï

data Con (A : Set) : Set where
  Œµ : Con A
  _‚Ä¢_ : Con A ‚Üí A ‚Üí Con A

infixl 5 _‚Ä¢_

data Type : Set where
  Œπ : Type
  _‚áí_ : Type ‚Üí Type ‚Üí Type

variable S T : Type

infixr 7 _‚áí_

Ctx = Con Type
variable Œì : Ctx

data _‚àã_ : Ctx ‚Üí Type ‚Üí Set where
  zero : Œì ‚Ä¢ T ‚àã T
  suc : Œì ‚àã T ‚Üí Œì ‚Ä¢ S ‚àã T

infix 4 _‚àã_

data _‚ä¢_ : Ctx ‚Üí Type ‚Üí Set where
  var : Œì ‚àã T ‚Üí Œì ‚ä¢ T
  ∆õ_ : Œì ‚Ä¢ S ‚ä¢ T ‚Üí Œì ‚ä¢ S ‚áí T
  Œº_ : Œì ‚Ä¢ T ‚ä¢ T ‚Üí Œì ‚ä¢ T
  _¬∑_ : Œì ‚ä¢ S ‚áí T ‚Üí Œì ‚ä¢ S ‚Üí Œì ‚ä¢ T

infix 4 _‚ä¢_

variable r s t : Œì ‚ä¢ T

mutual
  data Env : Ctx ‚Üí Set where
    Œµ : Env Œµ
    _‚Ä¢_ : Env Œì ‚Üí Domain T ‚Üí Env (Œì ‚Ä¢ T)

  data Domain : Type ‚Üí Set where
    error : Domain T
    timeout : Domain T
    ‚ü®_‚ü©_ : Œì ‚ä¢ T ‚Üí Env Œì ‚Üí Domain T

infix 6 ‚ü®_‚ü©_

variable Œ≥ Œ¥ : Env Œì
variable a b d f : Domain T

_??_ : Env Œì ‚Üí Œì ‚àã T ‚Üí Domain T
(Œ≥ ‚Ä¢ a) ?? zero = a
(Œ≥ ‚Ä¢ _) ?? suc x = Œ≥ ?? x

infix 5 _??_

eval : Œì ‚ä¢ T ‚Üí Env Œì ‚Üí ‚Ñï ‚Üí Domain T
eval t Œ≥ zero = timeout
eval (var x) Œ≥ (suc n)
  with Œ≥ ?? x
...  | timeout = error
...  | error = error
...  | ‚ü® t ‚ü© Œ¥ = eval t Œ¥ n
eval (∆õ t) Œ≥ (suc n) = ‚ü® ∆õ t ‚ü© Œ≥
eval (Œº t) Œ≥ (suc n) = eval t (Œ≥ ‚Ä¢ ‚ü® Œº t ‚ü© Œ≥) n
eval (r ¬∑ s) Œ≥ (suc n)
  with eval r Œ≥ n
... | ‚ü® var _ ‚ü© _ = error
... | ‚ü® Œº _ ‚ü© _ = error
... | ‚ü® _ ¬∑ _ ‚ü© _ = error
... | error = error
... | timeout = timeout
... | ‚ü® ∆õ t ‚ü© Œ¥ = eval t (Œ¥ ‚Ä¢ ‚ü® s ‚ü© Œ≥) n

data Good : Domain T ‚Üí Set where
  closureGood : Good (‚ü® t ‚ü© Œ¥)
  timeoutGood : Good {T} timeout

mutual
  ùíü[_,_] : (T : Type) ‚Üí ‚Ñï ‚Üí Domain T ‚Üí Set
  ùíü[ S ‚áí T , k ] (‚ü® ∆õ t ‚ü© Œ¥) =
    ‚àÄ {j : ‚Ñï}
    ‚Üí j < k
    ‚Üí ‚àÄ {Œì} {Œ≥ : Env Œì} {s : Œì ‚ä¢ S}
      ‚Üí (Œ≥ , s) ‚àà ‚Ñ∞[ S , j ]
      ‚Üí (Œ¥ ‚Ä¢ ‚ü® s ‚ü© Œ≥ , t) ‚àà ‚Ñ∞[ T , j ]
  ùíü[ _ , _ ] _ = ‚ä•

  ‚Ñ∞[_,_] : (T : Type) ‚Üí ‚Ñï ‚Üí Env Œì √ó Œì ‚ä¢ T ‚Üí Set
  ‚Ñ∞[ T , k ] (Œ≥ , t) =
    ‚àÄ {j} {b}
    ‚Üí j < k
    ‚Üí eval t Œ≥ j ‚â° b ‚Üí b ‚àà ùíü[ T , k ‚à∏ j ]

_‚ä®_#_ : (Œì : Ctx) ‚Üí Env Œì ‚Üí ‚Ñï ‚Üí Set
Œì ‚ä® Œ≥ # k =
  ‚àÄ {T} ‚Üí (x : Œì ‚àã T) ‚Üí ‚àÄ {a} ‚Üí Œ≥ ?? x ‚â° a ‚Üí a ‚àà ùíü[ T , k ]

infix 4 _‚ä®_#_

semantic-typing-k : (Œì : Ctx) ‚Üí (T : Type) ‚Üí Œì ‚ä¢ T ‚Üí ‚Ñï ‚Üí Set
semantic-typing-k Œì T t k = ‚àÄ {Œ≥} ‚Üí Œì ‚ä® Œ≥ # k ‚Üí (Œ≥ , t) ‚àà ‚Ñ∞[ T , k ]

infix 4 semantic-typing-k
syntax semantic-typing-k Œì T t k = Œì ‚ä® t ‚à∑ T # k

semantic-typing : (Œì : Ctx) ‚Üí (T : Type) ‚Üí Œì ‚ä¢ T ‚Üí Set
semantic-typing Œì T t = ‚àÄ k ‚Üí Œì ‚ä® t ‚à∑ T # k

infix 4 semantic-typing
syntax semantic-typing Œì T t = Œì ‚ä® t ‚à∑ T

fundamental-lemma : ‚àÄ (t : Œì ‚ä¢ T) ‚Üí Œì ‚ä® t ‚à∑ T
fundamental-lemma = {!!}

ùíü‚ÜíGood : d ‚àà ùíü[ T , k ] ‚Üí Good d
ùíü‚ÜíGood {Œπ} {d = error} {k = zero} ()
ùíü‚ÜíGood {_ ‚áí _} {d = error} {k = zero} ()
ùíü‚ÜíGood {Œπ} {d = timeout} {k = zero} ()
ùíü‚ÜíGood {_ ‚áí _} {d = timeout} {k = zero} _ = timeoutGood
ùíü‚ÜíGood {_ ‚áí _} {d = ‚ü® _ ‚ü© _} {k = zero} _ = closureGood
ùíü‚ÜíGood {Œπ} {d = error} {k = suc _} ()
ùíü‚ÜíGood {_ ‚áí _} {d = error} {k = suc _} ()
ùíü‚ÜíGood {Œπ} {d = timeout} {k = suc _} ()
ùíü‚ÜíGood {_ ‚áí _} {d = timeout} {k = suc _} ()
ùíü‚ÜíGood {_ ‚áí _} {d = ‚ü® _ ‚ü© _} {k = suc _} _ = closureGood

type-soundness : ‚àÄ (t : Œµ ‚ä¢ T) ‚Üí eval t Œµ n ‚â° d ‚Üí Good d
type-soundness {n = n} t refl =
  ùíü‚ÜíGood (fundamental-lemma t (suc n) (Œª ()) ‚â§-refl refl)
